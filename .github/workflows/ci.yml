name: Continuous Integration and Delivery

on:
  pull_request:
    branches:
      - dev
#
env:
  WEB_IMAGE: ghcr.io/$(echo $GITHUB_REPOSITORY | tr '[:upper:]' '[:lower:]')/web

jobs:
  check-code-style:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          python-version: 3.11
      - run: pip install -r requirements/dev.txt
      - run: flake8 .

  build:
    name: Build Docker Images
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Add environment variables to .env
        run: |
             echo "DEBUG=1" >> .env
             echo "SECRET_KEY=${{ secrets.SECRET_KEY }}" >> .env
             echo "DATABASE_URL=${{ secrets.DATABASE_URL }}" >> .env
             echo "PAYMENT_LOGIN=${{ secrets.PAYMENT_LOGIN }}" >> .env
             echo "PAYMENT_PASS=${{ secrets.PAYMENT_PASS }}" >> .env
             echo "PAYMENT_URL=${{ secrets.PAYMENT_URL }}" >> .env
      - name: Set environment variables
        run: |
          echo "WEB_IMAGE=$(echo ${{env.WEB_IMAGE}} )" >> $GITHUB_ENV
      - name: Log in to GitHub Packages
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
#        run: echo ${PERSONAL_ACCESS_TOKEN} | docker login ghcr.io -u ${{ secrets.NAMESPACE }} --password-stdin
      - name: Pull images
        run: |
          docker pull ${{ env.WEB_IMAGE }} || true
      - name: Build images
        run: |
          docker build -t ${{ env.WEB_IMAGE }} -f ./docker/Dockerfile.dev .
      - name: Push images
        run: |
          docker push ${{ env.WEB_IMAGE }}

  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout master
        uses: actions/checkout@v3
      - name: Add environment variables to .env
        run: |
          echo "DEBUG=1" >> .env
          echo "SECRET_KEY=${{ secrets.SECRET_KEY }}" >> .env
          echo "DATABASE_URL=${{ secrets.DATABASE_URL }}" >> .env
          echo "PAYMENT_LOGIN=${{ secrets.PAYMENT_LOGIN }}" >> .env
          echo "PAYMENT_PASS=${{ secrets.PAYMENT_PASS }}" >> .env
          echo "PAYMENT_URL=${{ secrets.PAYMENT_URL }}" >> .env
          echo "WEB_IMAGE=${{ env.WEB_IMAGE }}" >> .env
          echo "NAMESPACE=${{ secrets.NAMESPACE }}" >> .env
          echo "PERSONAL_ACCESS_TOKEN=${{ secrets.PERSONAL_ACCESS_TOKEN }}" >> .env
#      - name: Add the private SSH key to the ssh-agent
#        env:
#          SSH_AUTH_SOCK: /tmp/ssh_agent.sock
#        run: |
#          apk update && apk add openssh-client bash
#          eval $(ssh-agent -s)
#          echo "${{ secrets.PRIVATE_KEY }}" | tr -d '\r' | ssh-add -
#          mkdir -p ~/.ssh
#          chmod 700 ~/.ssh
#      - name: Log in to GitHub Packages
#        uses: docker/login-action@v2
#        with:
#          registry: ghcr.io
#          username: ${{ github.repository_owner }}
#          password: ${{ secrets.PERSONAL_ACCESS_TOKEN }}

      - name: install ssh keys
        # check this thread to understand why its needed:
        # https://stackoverflow.com/a/70447517
        run: |
          install -m 600 -D /dev/null ~/.ssh/id_rsa
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          ssh-keyscan -H ${{ secrets.SSH_HOST }} > ~/.ssh/known_hosts
      - name: connect and pull
        run: ssh ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} "cd app && git checkout dev && git pull && exit"
      - name: cleanup
        run: rm -rf ~/.ssh
#      - name: Build and deploy images
#        env:
#          SERVER_IP: ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }}
#        run: |
#          scp -o StrictHostKeyChecking=no -r ./.env ./docker-compose.prod.yml root@${{ secrets.SSH_HOST }}:/app
#          ssh -o StrictHostKeyChecking=no root@${{ secrets.SSH_HOST }} << 'ENDSSH'
#            cd /app
#            source .env
#            docker login ghcr.io -u $NAMESPACE -p $PERSONAL_ACCESS_TOKEN
#            docker pull $WEB_IMAGE
#            sudo docker-compose -f docker-compose.prod.yml up -d
#          ENDSSH
